"use strict";
var Complex=require('Complex'); //exportable class
var rungeKutta=function(f, options){ //solves y'=f(x, y)
    var optionsDefault={
        n:256,
        initialY:0,
        initialX:0,
        maxX:1,
        complex:false,
        additionalParameters:[]
    };
    if(!options){
        options=optionsDefault;
    }
    else{
        var keys=Object.keys(optionsDefault);
        var m=keys.length;
        for(var i=0; i<m; i++){
          if(!options[keys[i]]){
              options[keys[i]]=optionsDefault[keys[i]];
          }
        }
    }
      var yArray=[];
      var xArray=[];
      var n=options.n;
      var x=options.initialX;
      var y=options.initialY;
      var h=(options.maxX-x)/n;
      yArray.push(y);
      xArray.push(x);
      var hlfH=.5*h;
      var cmplHlf=new Complex(hlfH, 0);
      var cmplH=new Complex(h, 0);
      var sixthH=new Complex(h/6, 0);
      var cmplx2=new Complex(2, 0);
      //console.log(options.additionalParameters);
      if(options.complex){
          y=new Complex(y, 0);
          for(var i=0; i<n; i++){
              var k1=f(x,y, options.additionalParameters[i]);
              var k2=f(x+hlfH, y.add(k1.multiply(cmplHlf)), options.additionalParameters[i]);
              var k3=f(x+hlfH, y.add(k2.multiply(cmplHlf)), options.additionalParameters[i]);
              var k4=f(x+h, y.add(k3.multiply(cmplH)), options.additionalParameters[i]);
              y=y.add(k1.add(k2.multiply(cmplx2).add(k3.multiply(cmplx2).add(k4))).multiply(sixthH));
              x=x+h;
              yArray.push(y);
              xArray.push(x);
          }
      }
      else{
          for(var i=0; i<n; i++){
              var k1=f(x,y);
              var k2=f(x+hlfH, y+hlfH*k1);
              var k3=f(x+hlfH, y+hlfH*k2);
              var k4=f(x+h, y+h*k3);
              y=y+sixthH*(k1+2*k2+2*k3+k4);
              x=x+h;
              yArray.push(y);
              xArray.push(x);
          }
      }
      return({y:yArray, x:xArray});
}
module.exports=rungeKutta; //exportable class
