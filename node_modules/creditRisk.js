"use strict";
var fullDistribution = require('fullDistribution');
var gaussianCF = require('GaussianCF');
var lgdCF = require('lgdCF');
var lpmCF = require('lpmCF');
var Gamma = require('Gamma');
var IntegroVasicekMG = require('IntegroVasicekMG');
var FangOosterlee = require('FangOosterlee'); //exportable class
var Complex = require('Complex'); //exportable class
process.on('message', function(options) {
  var p = [];
  var l = [];
  var w = [];
  var r = [];
  var b = [];
  var mu = .3; //exposure mean reversion
  var optb = .5; //exposure long run average
  var v = .2 //exposure volatility
  var max = .09; //to make it easier on the end user, this is now hardcoded options.maxPD;
  var min = .01; //to make it easier on the end user, this is now hardcoded options.minPD;
  var maxL = 40000;
  var minL = 10000;
  var totalBalance=0;
  var exL = (maxL + minL) / 2.0; //
  var q=0;
  var alpha=[options.alpha];
  var lossGivinLiquid = options.n * exL * options.lambda;
  if (lossGivinLiquid > 0) {
    q = options.q / lossGivinLiquid; //liquidity
  }
  var rho = [
    [1]
  ];
  for (var i = 0; i < options.n; i++) {
    p[i] = Math.random() * (max - min) + min;
    r[i] = 0;
    w[i] = [1];
    b[i] = 0;
    //l[i]={a:options.a, b:options.b}; //for gamma
    var expos=maxL * Math.random() + minL;
    totalBalance+=expos;
    l[i] = {
      exposure: expos,
      alpha: mu,
      b: optb,
      sigma: v,
      t: options.t,
      x0: optb
    }; //for CIR
    //w.push([1]);
  }
  var lgd = lgdCF;
  var systemicRisk = new IntegroVasicekMG(alpha, [
    [options.sigma]
  ], rho, [options.X0], options.t);
  var idiosyncraticRisk = new lpmCF(lgd, p, l, {
    w: w,
    b: b,
    r: r,
    lambda0: lossGivinLiquid,
    q: q
  });
  //var mu=options.n*l[0].a*l[0].b*options.alph*options.maxPD;//for gamma
  var mu = totalBalance * options.alph*max;// * max; //for cir
  var sigma = 0; //mu/4;
  //var optGauss={};
  //optGauss.w=[1, 0, 0];
  var returnAndVolatility = new gaussianCF(mu, sigma);//, optGauss); //, optGauss);
  //console.log(returnAndVolatility.logCF(new Complex(.5, .5)));
  var logDist = [];
  logDist[0] = idiosyncraticRisk;
  logDist[1] = returnAndVolatility;
  var fullDist = new fullDistribution(systemicRisk, logDist);


  var computeDist = new FangOosterlee(options.k, options.h);
  var xmax = 4*mu;
  var xmin = -lossGivinLiquid - (mu / options.alph) * 1.6; //very rough....
  //xmin=-8;
  //xmax=10;

  var startTime = new Date();
  var distribution = computeDist.computeDistribution(fullDist, xmin, xmax);
  //var distribution=computeDist.computeDistribution(returnAndVolatility, xmin, xmax);
  var endTime = new Date() - startTime;
  console.log(endTime / 1000);
  //console.log(distribution);
  process.send({
    result: distribution
  });
  process.send({
    close: "close"
  });
});

//}
//module.exports=main; //exportable class...TEMPORARY
