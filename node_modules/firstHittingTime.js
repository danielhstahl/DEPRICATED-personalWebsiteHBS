"use strict";
var od = require('ode');
var Complex = require('Complex'); //exportable class
process.on('message', function(options) {
  var ode = new od(options);
  var l = options.l;
  var k = options.k;
  var n = options.n;
  var m=options.m;
  var X0 = m * .2; //this seems a little unwise...
  var alpha = options.alpha;
  var sigma = options.sigma * options.sigma;
  var data={};
  var exVal = Math.abs(Math.log(m / X0) / (alpha - .5 * sigma)); //expected value of tau when delta=1, used for determining size of t-space
  var std = Math.sqrt(Math.abs((Math.log(m / X0) * sigma) / (Math.pow(alpha - .5 * sigma, 3)))); //standard deviation of tau when delta=1, used for determining size of t-space
  var xMax = exVal + 5 * std; //a range for t-space...production code would would chebyshev's inequality to compute the range instead of an arbitrary "5"
  var lam = xMax / (k - 1); //"dt"
  var dx = m / (l - 1); //"dx"
  var du=Math.PI/xMax; //discrete u
  var cp=2/xMax;
  var phi = []; //array of arrays...
  var startTime = new Date();
  var initial = ode.execute(0); //get solution of ODE for each u...this is not included in for loop since we need to multiply by .5

  for (var i = 0; i < l; i++) {
    initial[i] = initial[i] * .5;
  }
  var denominator = n + l - 1;
  phi.push(initial);
  for (var i = 1; i < n; i++) {
    var updateRatio = (i * 100) / denominator;
    process.send({
      update: updateRatio + '%'
    });
    phi.push(ode.execute(i * du)); //get solution of ODE for each u

  }
  for (var h = 0; h < l; h++) {
    var updateRatio = ((n + h) * 100) / denominator;
    process.send({
      update: updateRatio + '%'
    });
    var key = Math.round(dx * h * 10000) / 10000.0;
    key = key.toString();
    data[key] = [];
    var ySeries = [];
    var xSeries = [];
    for (var i = 0; i < k; i++) { //iterate over "t" discretions
      var y = 0;
      for (var j = 0; j < n; j++) {
        y = y + phi[j][h] * Math.cos(du * j * lam * i) * cp;
      }
      ySeries.push(y);
      xSeries.push(i * lam);
    }
    data[key] = {
      x: xSeries,
      y: ySeries
    }; //put data in a manner that is easily readable
  }

  var endTime = new Date() - startTime;
  console.log(endTime / 1000);
  //console.log(distribution);
  process.send({
    result: data
  });
  process.send({close:"close"});

});

//}
//module.exports=main; //exportable class...TEMPORARY
