"use strict";
var Complex = require('Complex'); //exportable class
var matrix = require('matrix');
var rungeKuttaMD = function(f, options) { //solves y'=f(x, y)
  var optionsDefault = {
    n: 256,
    initialY: [0], //can be multidimensional
    initialX: 0,
    maxX: 1,
    complex: false
  };
  if (!options) {
    options = optionsDefault;
  } else {
    var keys = Object.keys(optionsDefault);
    var m = keys.length;
    for (var i = 0; i < m; i++) {
      if (!options[keys[i]]) {
        options[keys[i]] = optionsDefault[keys[i]];
      }
    }
  }
  var yArray = {};
  var xArray = [];
  var n = options.n;
  var x = options.initialX;
  var y = options.initialY;
  var h = (options.maxX - x) / n;

  var m = y.length; //number of multidimensional

  //yArray.push(y);
  xArray.push(x);
  var hlfH = .5 * h;
  var cmplHlf = new Complex(hlfH, 0);
  var cmplH = new Complex(h, 0);
  var sixthH = new Complex(h / 6, 0);
  var cmplx2 = new Complex(2, 0);

  if (options.complex) {
    for (var i = 0; i < m; i++) {
      yArray["y" + i] = [];
      if (!y[i].real && y[i].real !== 0) {
        y[i] = new Complex(y[i], 0);
      }
      yArray["y" + i][0] = y[i];
    }
    for (var i = 0; i < n; i++) {
      var ym = new matrix(y);
      var k1 = new matrix(f(x, y));
    //  console.log(k1.multiply(cmplHlf));
    //  console.log(y);
      var k2 = new matrix(f(x + hlfH, ym.add(k1.multiply(cmplHlf))));
      var k3 = new matrix(f(x + hlfH, ym.add(k2.multiply(cmplHlf))));
      var k4 = new matrix(f(x + h, ym.add(k3.multiply(cmplH))));
      y = ym.add(new matrix(k4.add(new matrix(k1.add(k2.multiply(cmplx2))).add(k3.multiply(cmplx2)))).multiply(sixthH));
      for (var j = 0; j < m; j++) {
        yArray["y" + j][i+1] = y[j];
      }
      xArray.push(x);
    }
  } else {
    for (var i = 0; i < m; i++) {
      yArray["y" + i] = [];
      yArray["y" + i][0] = y[i];
    }
    for (var i = 0; i < n; i++) {
      var ym = new matrix(y);
      var k1 = f(x, y);
      var k2 = f(x + hlfH, y + hlfH * k1);
      var k3 = f(x + hlfH, y + hlfH * k2);
      var k4 = f(x + h, y + h * k3);
      var k1 = new matrix(f(x, y));
      var k2 = new matrix(f(x + hlfH, ym.add(k1.multiply(hlfH))));
      var k3 = new matrix(f(x + hlfH, ym.add(k2.multiply(hlfH))));
      var k4 = new matrix(f(x + h, ym.add(k3.multiply(h))));
      y = ym.add(new matrix(k4.add(new matrix(k1.add(k2.multiply(2))).add(k3.multiply(2)))).multiply(1/6));
      x = x + h;
      for (var j = 0; j < m; j++) {
        yArray["y" + j][i+1] = y[j];
      }
      xArray.push(x);
    }
  }
  return ({
    y: yArray,
    x: xArray
  });
}
module.exports = rungeKuttaMD; //exportable class
